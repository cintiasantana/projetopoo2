CREATE TABLE DENTISTA(
CODIGO INTEGER,
NOME VARCHAR(60) NOT NULL,
CPF VARCHAR(11) NOT NULL UNIQUE,
TELEFONE VARCHAR(14) NOT NULL,
EMAIL VARCHAR(60) NOT NULL,
CONSTRAINT PK_CODIGO_DENTISTA PRIMARY KEY(CODIGO)
);

CREATE TABLE PACIENTE(
CODIGO INTEGER,
NOME VARCHAR(60)NOT NULL,
CPF VARCHAR(11) NOT NULL UNIQUE,
TELEFONE VARCHAR(14) NOT NULL,
EMAIL VARCHAR(60) NOT NULL,
DATANASCIMENTO VARCHAR(10) NOT NULL,
CONSTRAINT PK_CODIGO_PACIENTE PRIMARY KEY (CODIGO)
);

CREATE TABLE ENDERECO(
ENDERECO_ID INTEGER,
PACIENTE_ID INTEGER,
DENTISTA_ID INTEGER,
RUA VARCHAR(60) NOT NULL,
NUMERO VARCHAR(10) NOT NULL,
BAIRRO VARCHAR(50) NOT NULL,
CIDADE VARCHAR(50) NOT NULL,
UF VARCHAR(50) NOT NULL,
CONSTRAINT PK_ENDERECO_ID PRIMARY KEY (ENDERECO_ID),
CONSTRAINT FK_PACIENTE_ID FOREIGN KEY (PACIENTE_ID) REFERENCES PACIENTE (CODIGO),
CONSTRAINT FK_DENTISTA_ID FOREIGN KEY (DENTISTA_ID) REFERENCES DENTISTA (CODIGO)
);

CREATE TABLE PROCEDIMENTO(
CODIGO INTEGER,
PROCEDIMENTO VARCHAR(50) NOT NULL,
VALOR DOUBLE PRECISION NOT NULL,
CONSTRAINT PK_PROCEDIMENTO_ID PRIMARY KEY (CODIGO)
);

CREATE TABLE CONSULTA(
CONSULTA_ID INTEGER,
PACIENTE_ID INTEGER,
DENTISTA_ID INTEGER,
DATACONSULTA DATE NOT NULL,
CODPROCEDIMENTO INTEGER,
CONSTRAINT PK_CONSULTA_ID PRIMARY KEY (CONSULTA_ID),
CONSTRAINT FK_CONSULTA_PACIENTE_ID FOREIGN KEY (PACIENTE_ID) REFERENCES PACIENTE (CODIGO),
CONSTRAINT FK_CONSULTA_DENTISTA_ID FOREIGN KEY (DENTISTA_ID) REFERENCES DENTISTA (CODIGO),
CONSTRAINT FK_CONSULTA_PROCEDIMENTO_ID FOREIGN KEY (CODPROCEDIMENTO) REFERENCES PROCEDIMENTO (CODIGO)
);

CREATE SEQUENCE endereco_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER endereco_seq_tr
 BEFORE INSERT ON endereco FOR EACH ROW
 WHEN (NEW.endereco_id IS NULL)
BEGIN
 SELECT endereco_seq.NEXTVAL INTO :NEW.endereco_id FROM DUAL;
END;

/

CREATE INDEX FK_PACIENTE_ID ON ENDERECO (PACIENTE_ID);
CREATE INDEX FK_DENTISTA_ID ON ENDERECO (DENTISTA_ID);
/

create or replace
procedure reset_seq( p_seq_name in varchar2 )
is
    l_val number;
begin
    execute immediate
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;

    execute immediate
    'alter sequence ' || p_seq_name || ' increment by -' || l_val || 
                                                          ' minvalue 0';

    execute immediate
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;

    execute immediate
    'alter sequence ' || p_seq_name || ' increment by 1 minvalue 0';
end;